#!/usr/bin/env python
# -*- coding: utf-8 -*-

# http://stackoverflow.com/questions/18991408/python-finite-difference-functions
# INPUT: 2 col := X Y   /// CDF

# OUTPUT: calculated center (X-axis)

# 統計　参考資料
# https://oku.edu.mie-u.ac.jp/~okumura/stat/basics.html

from __future__ import print_function
import sys, math
import numpy as np
from scipy import ndimage
# import matplotlib.pyplot as plt

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

# 微分
def derivatives( x, f ):
    assert type( x[0] ) != int
    assert len(x) == len(f)

    # 念の為、uniform sampling に限定
    #assert np.unique( np.diff(x) ).size == 1, "invalid input array x: Not uniform sampling "
    
    x_f2 = 0.5*(x[1:] + x[:-1])
    return { "x": x_f2, "df": np.diff(f) / np.diff(x) }

### convert to normalized gaussian array x,f
def errfunc2gaussian( x, f):
    s,t = f[0], f[-1]
    if not [s,t] == [0,1] and not [s,t] == [1,0] :
        eprint( "[warning]: f[0],f[-1] == %f,%f" %(f[0],f[-1]) )
    for fval in f:
        assert ( fval >= 0. and fval <= 1. ) , "invalid f value: %f" % fval

    # if decreasing f
    if s > t:
        eprint("[info]: decreasing Y-values")
        f = 1.0 - f
    
    r = derivatives( x, f )
    x2, df = r["x"], r["df"] # now x2-df is gaussian-like
    raise "TODO: trim by Y value; then fitting (by straight line?); then output center (y==0.5)"
    # just calculate mean
    # mean = np.sum( x2 * df ) / np.sum(df)
    # sigma = np.sqrt(   np.sum(  (x2-mean)**2 * df ) / np.sum(df)   )
    
    print( mean, sigma )
    return ( mean ,sigma )
    
if __name__ == "__main__":
    inp = sys.stdin
    if len(sys.argv) >= 2:
        inp = sys.argv[1]
    x, f = np.loadtxt( inp , unpack = True, delimiter= "\t" )
    mean, sigma = errfunc2gaussian( x,f )

    # if "--show" in sys.argv :
    #     plt.plot( x, f, "o" )
    #     xarr = np.array( x )
    #     yy = map( lambda x: math.erf( - (x-mean)/sigma  ) / 2.0 + 0.5, xarr  )
    #     plt.plot( xarr, yy, "r--" )
    #     plt.show()
    # # r = derivatives( x, f )
    # # x2, df = r["x"], r["df"]
    # # for dx,df in zip(x2, df):
    # #     print "%f\t%f" % ( dx, df )
