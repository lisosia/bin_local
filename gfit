#!/usr/bin/env python

from gauss_integral_fit import gauss_int_fit, gauss_int
from util import float_u, get_deriv
import sys, re, argparse
import numpy as np
from pylab import *
from scipy.special import erf

# gauss_fit_center RESULT.tsv // RESULT cols = [time, count, total(consts), other]

parser = argparse.ArgumentParser()
parser.add_argument( "file" )
parser.add_argument( "num", type=int )
parser.add_argument( "--inc", action="store_true" )
parser.add_argument( "--show", action="store_true" )
args = parser.parse_args()

def main():
    total = np.float( args.num )
    x,y = np.loadtxt( args.file , unpack = True, delimiter= "\t", converters = { 0: float_u } )
    
    filename = sys.argv[1]
    guess_s = 4e-1

    m = re.match( r".*\d+e(\d+).*", filename )
    if m :         
        slope = m.group(1)        
        # for tsmc to succcess fitting
        if float(slope) >= 10 : 
            slope = 9
        guess_s = 1.0e-1 / ( 10 ** float( slope ) )
        # print "slope = %s , guessed scale is %f" % (slope, guess_s)

    INC = args.inc  # fitt fuction is increasing or not

    ret = gauss_int_fit( x, y / total, [ 1. * guess_s ,1. * guess_s ], INC )
    #ret = gauss_int_fit( x, y / total, [ 0 ,1. * guess_s ], INC )
    param, info, infodict, mesg, ier = ret
    yerrors = infodict['fvec']
    #print >> sys.stderr , "\nfvec " , yerrors
    #print >> sys.stderr , "RMS-of-yerrors " , np.sqrt( np.mean( np.square(yerrors) ) )

    if not (ier == 1):
        print >> sys.stderr,  "!!! %s : FITTING maybe FAILED" % args.file

    mean ,sigma = param

    plot( x, y, "ro")
    
    xxx = np.linspace( np.min(x), np.max(x), len(x) * 100 )
    if INC:
        plot( xxx,  gauss_int(xxx , mean,sigma ) * total , "k--" )
    else:
        plot( xxx, (1.0 - gauss_int(xxx , mean,sigma )  ) * total , "k--" )

    xlabel("Tdelay")
    ylabel("diff of count")
    title("gaussian fitting")

    if args.show:
        show()

    print "%e\t%e" % (mean,sigma)
    # sys.stderr.write( str(info) + "" )

if __name__=="__main__":
    main()
